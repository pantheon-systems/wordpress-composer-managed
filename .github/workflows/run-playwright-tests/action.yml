name: Run Playwright Tests
on:
  workflow_call:
    inputs:
      site_id:
        required: true
        type: string
      site_name:
        required: true
        type: string
      type:
        required: true
        type: string
      site_url:
        required: true
        type: string
      os:
        required: false
        type: string
      ssh_key:
        required: true
        type: string
      terminus_token:
        required: true
        type: string
      github_token:
        required: true
        type: string
      pr:
        required: false
        type: string
      workspace:
        required: true
        type: string


runs:
  using: composite
  steps:
    - name: Generate lock files
      shell: bash
      run: |
        npm install --package-lock-only

    - name: Set up cache for dependencies
      uses: actions/cache@v4
      id: cache
      with:
        path: |
          ~/.composer/cache
          ./vendor
          ~/.npm
          ./node_modules
        key: ${{ inputs.os }}-deps-${{ hashFiles( '**/composer.json', '**/package-lock.json' ) }}
        restore-keys: ${{ inputs.os }}-deps-

    - name: Install Composer dependencies
      if: steps.cache.outputs.cache-hit != true
      shell: bash
      run: composer update --no-progress --prefer-dist --optimize-autoloader

    - name: Install NPM dependencies
      if: steps.cache.outputs.cache-hit != true
      shell: bash
      run: npm ci

    - name: Install Playwright Browsers
      shell: bash
      run: npx playwright install --with-deps

    - name: Install SSH keys
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ inputs.ssh_key }}

    - name: Get latest Terminus release
      uses: pantheon-systems/terminus-github-actions@v1
      with:
        pantheon-machine-token: ${{ inputs.terminus_token }}
    - name: Validate Pantheon Host Key
      shell: bash
      run: |
        echo "Host *.drush.in HostKeyAlgorithms +ssh-rsa" >> ~/.ssh/config
        echo "Host *.drush.in PubkeyAcceptedKeyTypes +ssh-rsa" >> ~/.ssh/config
        echo "StrictHostKeyChecking no" >> ~/.ssh/config

    - name: Log into Terminus
      shell: bash
      run: |
        terminus auth:login --machine-token=${{ inputs.terminus_token }}

    - name: Create Site
      shell: bash
      run: |
        if terminus site:info ${{ inputs.site_id }}; then
          echo "Test site already exists, skipping site creation."
          # If the site exists already, we should switch it to git mode.
          terminus connection:set ${{ inputs.site_id }}.dev git -y
        else
          terminus site:create ${{ inputs.site_id }} "${{ inputs.site_name }}" 'WordPress (Composer Managed)' --org=5ae1fa30-8cc4-4894-8ca9-d50628dcba17
        fi

    - name: Clone the site locally and copy PR updates
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      shell: bash
      run: |
        git config --global user.email "cms-platform+sage-testing@pantheon.io"
        git config --global user.name "Pantheon WPCM Bot"
        PR_NUMBER=$(echo ${{ inputs.pr }})
        echo "Pull Request Number: ${PR_NUMBER}"
        COMMIT_MSG=$(gh pr view ${PR_NUMBER} --json commits --jq '.commits[-1] | "\(.messageHeadline) \(.messageBody)"')
        echo "Commit Message: ${COMMIT_MSG}"
        terminus local:clone ${{ inputs.site_id }}
        cd ~/pantheon-local-copies/${{ inputs.site_id }}
        rsync -a --exclude='.git' ${{ inputs.workspace }}/ .
        git add -A
        git commit -m "Update to latest commit: ${COMMIT_MSG}" || true
        git push origin master || true

    - name: Status Check
      shell: bash
      run: terminus wp ${{ inputs.site_id }}.dev -- cli info

    - name: Install (Single Site) WordPress
      if: ${{ inputs.type == 'single' }}
      shell: bash
      run: |
        terminus wp ${{ inputs.site_id }}.dev -- core install --title="${{ inputs.site_name }}" --admin_user=wpcm --admin_email=test@dev.null
        terminus wp ${{ inputs.site_id }}.dev -- option update permalink_structure '/%postname%/'
        terminus wp ${{ inputs.site_id }}.dev -- rewrite flush
        terminus wp ${{ inputs.site_id }}.dev -- cache flush

    - name: Install (Subdirectory Multisite) WordPress
      if: ${{ inputs.type == 'subdir' }}
      shell: bash
      run: |
        terminus wp ${{ inputs.site_id }}.dev -- core multisite-install --title="${{ inputs.site_name }}" --admin_user=wpcm --admin_email=test@dev.null --subdomains=false
        terminus wp ${{ inputs.site_id }}.dev -- option update permalink_structure '/%postname%/'
        terminus wp ${{ inputs.site_id }}.dev -- rewrite flush
        terminus wp ${{ inputs.site_id }}.dev -- cache flush

    - name: Install (Subdomain Multisite) WordPress
      if: ${{ inputs.type == 'subdom' }}
      shell: bash
      run: |
        terminus wp ${{ inputs.site_id }}.dev -- core multisite-install --title="${{ inputs.site_name }}" --admin_user=wpcm --admin_email=test@dev.null --subdomains=true
        terminus wp ${{ inputs.site_id }}.dev -- option update permalink_structure '/%postname%/'
        terminus wp ${{ inputs.site_id }}.dev -- rewrite flush
        terminus wp ${{ inputs.site_id }}.dev -- cache flush

    - name: Set up subsite
      if: ${{ inputs.type == 'subdom' || inputs.type == 'subdir' }}
      shell: bash
      run: |
        # Set a URL var for the type of multisite.
        if [ "${{ inputs.type }}" == 'subdom' ]; then
          URL="foo.dev-${{ inputs.site_id }}.pantheonsite.io"
        fi
        if [ "${{ inputs.type }}" == 'subdir' ]; then
          URL="${{ inputs.site_url }}/foo"
        fi

        terminus wp ${{ inputs.site_id }}.dev -- site create --slug=foo --title="Foo" --email="foo@dev.null"
        terminus wp ${{ inputs.site_id }}.dev -- option update permalink_structure '/%postname%/' --url="$URL"

    - name: Install WP GraphQL
      shell: bash
      run: |
        terminus workflow:wait ${{ inputs.site_id }}.dev
        terminus connection:set ${{ inputs.site_id }}.dev sftp
        terminus wp ${{ inputs.site_id }}.dev -- plugin install --activate wp-graphql
        if [ "${{ inputs.type }}" == 'subdom' ]; then
          # We're going to assume the foo.dev subdomain already exists.
          terminus wp ${{ inputs.site_id }}.dev -- plugin activate wp-graphql --url=foo.dev-${{ inputs.site_id }}.pantheonsite.io
        fi
        if [ "${{ inputs.type }}" == 'subdir' ]; then
          terminus wp ${{ inputs.site_id }}.dev -- plugin activate wp-graphql --url=${{ inputs.site_url }}/foo
        fi

    - name: Run Playwright Tests on WordPress main site
      shell: bash
      run: npm run test .github/tests/wpcm.spec.ts

    - name: Run Playwright Tests on WordPress subdomain subsite
      if: ${{ inputs.type == 'subdom' }}
      env:
        SITE_URL: https://foo.dev-${{ inputs.site_id }}.pantheonsite.io
      shell: bash
      run: npm run test .github/tests/wpcm.spec.ts

    - name: Run Playwright tests on WordPress subdirectory subsite
      if: ${{ inputs.type == 'subdir' }}
      env:
        SITE_URL: ${{ inputs.site_url }}/foo
      shell: bash
      run: npm run test .github/tests/wpcm.spec.ts

    - name: Delete Site
      # Don't delete the subdomain multisite because those can't be free sites.
      if: success() && ${{ inputs.type != 'subdom' }}
      shell: bash
      run: terminus site:delete ${{ inputs.site_id }} -y
